class Game{
	field int numberToGuess, remainedNumberOfAttemps, lessNumbersCount, greaterNumbersCount, maxNumberToGuess, minNumberToGuess;
	field boolean isWon;
	
	constructor Game new(int numberToGuessValue, int maxNumberToGuessValue, int numberOfAttemps){
		let numberToGuess = numberToGuessValue;
		let remainedNumberOfAttemps = numberOfAttemps;
		let greaterNumbersCount = 0;
		let lessNumbersCount = 0;
		let minNumberToGuess = 0;
		let maxNumberToGuess = maxNumberToGuessValue;
		let isWon = false;
		return this;
	}
	method boolean isWon(){
		return isWon;
	}
	
	method void start(){
		var String inputString;
		var int inputNumber;
		var char readChar;
		do UI.clearMainWindow();	
		do UI.drawGameWindow(minNumberToGuess, maxNumberToGuess);
		while ((remainedNumberOfAttemps > 0) & (~(isWon))) {
			do UI.drawGameWindowRemainedAttempsCount(remainedNumberOfAttemps);	
			do UI.moveGameWindowInputCursor();
			let inputString = KeyboardExtensions.readString(3);
			let inputNumber = inputString.intValue();	
			if (inputNumber < numberToGuess){
				do UI.drawGameWindowLessNumber(lessNumbersCount, inputNumber);
				let lessNumbersCount = lessNumbersCount + 1;
			}
			if (inputNumber > numberToGuess){
				do UI.drawGameWindowGreaterNumber(greaterNumbersCount, inputNumber);
				let greaterNumbersCount = greaterNumbersCount + 1;
			}
			if (inputNumber = numberToGuess){
				let isWon = true;
			}
			do inputString.dispose();
			do UI.clearGameWindowInput();
			let remainedNumberOfAttemps = remainedNumberOfAttemps - 1;
		}
		do UI.clearMainWindow();
		if (isWon){
			do UI.drawWinWindow();
		} else {
			do UI.drawLoseWindowStatic();
		}
		let readChar = Keyboard.readChar();
		return;
	}
}
